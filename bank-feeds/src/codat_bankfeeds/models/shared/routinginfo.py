"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_bankfeeds.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class Type(str, Enum):
    r"""The type of routing number."""

    RTN = "rtn"
    ABA = "aba"
    SWIFT = "swift"
    BSB = "bsb"
    IBAN = "iban"
    NZ2 = "nz2"
    TRNO = "trno"
    SORTCODE = "sortcode"
    BLZ = "blz"
    IFSC = "ifsc"
    BANKCODE = "bankcode"
    APCA = "apca"
    CLABE = "clabe"


class RoutingInfoTypedDict(TypedDict):
    r"""Routing information for the bank. This does not include account number."""

    bank_code: NotRequired[Nullable[str]]
    r"""The numeric identifier of the routing number"""
    type: NotRequired[Nullable[Type]]
    r"""The type of routing number."""


class RoutingInfo(BaseModel):
    r"""Routing information for the bank. This does not include account number."""

    bank_code: Annotated[OptionalNullable[str], pydantic.Field(alias="bankCode")] = (
        UNSET
    )
    r"""The numeric identifier of the routing number"""

    type: OptionalNullable[Type] = Type.BANKCODE
    r"""The type of routing number."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["bankCode", "type"]
        nullable_fields = ["bankCode", "type"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
