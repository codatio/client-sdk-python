"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_bankfeeds.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class CompanyInformationTypedDict(TypedDict):
    r"""Information about the company from the underlying accounting software."""

    base_currency: NotRequired[str]
    r"""Currency set in the accounting software of the linked company."""
    company_name: NotRequired[str]
    r"""Name of the linked company."""
    multicurrency_enabled: NotRequired[Nullable[bool]]
    r"""Boolean showing if the organisation has multicurrency enabled"""
    plan_type: NotRequired[Nullable[str]]
    r"""Accounting software subscription type such as Trial, Demo, Standard"""


class CompanyInformation(BaseModel):
    r"""Information about the company from the underlying accounting software."""

    base_currency: Annotated[Optional[str], pydantic.Field(alias="baseCurrency")] = None
    r"""Currency set in the accounting software of the linked company."""

    company_name: Annotated[Optional[str], pydantic.Field(alias="companyName")] = None
    r"""Name of the linked company."""

    multicurrency_enabled: Annotated[
        OptionalNullable[bool], pydantic.Field(alias="multicurrencyEnabled")
    ] = UNSET
    r"""Boolean showing if the organisation has multicurrency enabled"""

    plan_type: Annotated[OptionalNullable[str], pydantic.Field(alias="planType")] = (
        UNSET
    )
    r"""Accounting software subscription type such as Trial, Demo, Standard"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "baseCurrency",
            "companyName",
            "multicurrencyEnabled",
            "planType",
        ]
        nullable_fields = ["multicurrencyEnabled", "planType"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
