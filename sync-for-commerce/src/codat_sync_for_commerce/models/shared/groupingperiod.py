"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_sync_for_commerce.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List, TypedDict
from typing_extensions import Annotated, NotRequired


class GroupingPeriodTypedDict(TypedDict):
    grouping_period_options: NotRequired[Nullable[List[str]]]
    r"""Array of grouping period options."""
    selected_grouping_period: NotRequired[Nullable[str]]
    r"""Grouping period i.e. Daily sales."""


class GroupingPeriod(BaseModel):
    grouping_period_options: Annotated[
        OptionalNullable[List[str]], pydantic.Field(alias="groupingPeriodOptions")
    ] = UNSET
    r"""Array of grouping period options."""

    selected_grouping_period: Annotated[
        OptionalNullable[str], pydantic.Field(alias="selectedGroupingPeriod")
    ] = UNSET
    r"""Grouping period i.e. Daily sales."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["groupingPeriodOptions", "selectedGroupingPeriod"]
        nullable_fields = ["groupingPeriodOptions", "selectedGroupingPeriod"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
