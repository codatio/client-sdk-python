"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_sync_for_expenses.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TrackingCategoryMappingInfoTypedDict(TypedDict):
    has_children: NotRequired[bool]
    r"""Boolean of whether the tracking category has child categories."""
    id: NotRequired[str]
    r"""Unique identifier of the tracking category."""
    name: NotRequired[str]
    r"""Name of the tracking category as it appears in the accounting software."""
    parent_id: NotRequired[Nullable[str]]
    r"""ID of the parent tracking category"""


class TrackingCategoryMappingInfo(BaseModel):
    has_children: Annotated[Optional[bool], pydantic.Field(alias="hasChildren")] = None
    r"""Boolean of whether the tracking category has child categories."""

    id: Optional[str] = None
    r"""Unique identifier of the tracking category."""

    name: Optional[str] = None
    r"""Name of the tracking category as it appears in the accounting software."""

    parent_id: Annotated[OptionalNullable[str], pydantic.Field(alias="parentId")] = (
        UNSET
    )
    r"""ID of the parent tracking category"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["hasChildren", "id", "name", "parentId"]
        nullable_fields = ["parentId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
