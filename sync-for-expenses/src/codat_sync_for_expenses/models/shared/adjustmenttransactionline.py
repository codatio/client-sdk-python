"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .invoiceto import InvoiceTo, InvoiceToTypedDict
from .recordref import RecordRef, RecordRefTypedDict
from .trackingrefadjustmenttransaction import (
    TrackingRefAdjustmentTransaction,
    TrackingRefAdjustmentTransactionTypedDict,
)
from codat_sync_for_expenses.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from codat_sync_for_expenses.utils import serialize_decimal, validate_decimal
from decimal import Decimal
import pydantic
from pydantic import model_serializer
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AdjustmentTransactionLineTypedDict(TypedDict):
    account_ref: RecordRefTypedDict
    amount: Decimal
    r"""Amount of the line. A positive line represents a debit; a negative line represents a credit."""
    description: NotRequired[str]
    r"""Any private, company notes about the transaction."""
    invoice_to: NotRequired[Nullable[InvoiceToTypedDict]]
    r"""Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop."""
    tracking_refs: NotRequired[
        Nullable[List[TrackingRefAdjustmentTransactionTypedDict]]
    ]


class AdjustmentTransactionLine(BaseModel):
    account_ref: Annotated[RecordRef, pydantic.Field(alias="accountRef")]

    amount: Annotated[
        Decimal,
        BeforeValidator(validate_decimal),
        PlainSerializer(serialize_decimal(False)),
    ]
    r"""Amount of the line. A positive line represents a debit; a negative line represents a credit."""

    description: Optional[str] = None
    r"""Any private, company notes about the transaction."""

    invoice_to: Annotated[
        OptionalNullable[InvoiceTo], pydantic.Field(alias="invoiceTo")
    ] = UNSET
    r"""Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop."""

    tracking_refs: Annotated[
        OptionalNullable[List[TrackingRefAdjustmentTransaction]],
        pydantic.Field(alias="trackingRefs"),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description", "invoiceTo", "trackingRefs"]
        nullable_fields = ["invoiceTo", "trackingRefs"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
