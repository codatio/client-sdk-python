"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .accountmappinginfo import AccountMappingInfo, AccountMappingInfoTypedDict
from .taxratemappinginfo import TaxRateMappingInfo, TaxRateMappingInfoTypedDict
from .trackingcategorymappinginfo import (
    TrackingCategoryMappingInfo,
    TrackingCategoryMappingInfoTypedDict,
)
from codat_sync_for_expenses.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List
from typing_extensions import Annotated, NotRequired, TypedDict


class MappingOptionsTypedDict(TypedDict):
    accounts: NotRequired[Nullable[List[AccountMappingInfoTypedDict]]]
    r"""Array of available accounts for mapping."""
    expense_provider: NotRequired[Nullable[str]]
    r"""Name of the expense integration."""
    tax_rates: NotRequired[Nullable[List[TaxRateMappingInfoTypedDict]]]
    r"""Array of available tax rates for mapping."""
    tracking_categories: NotRequired[
        Nullable[List[TrackingCategoryMappingInfoTypedDict]]
    ]
    r"""Array of available tracking categories for mapping."""


class MappingOptions(BaseModel):
    accounts: OptionalNullable[List[AccountMappingInfo]] = UNSET
    r"""Array of available accounts for mapping."""

    expense_provider: Annotated[
        OptionalNullable[str], pydantic.Field(alias="expenseProvider")
    ] = UNSET
    r"""Name of the expense integration."""

    tax_rates: Annotated[
        OptionalNullable[List[TaxRateMappingInfo]], pydantic.Field(alias="taxRates")
    ] = UNSET
    r"""Array of available tax rates for mapping."""

    tracking_categories: Annotated[
        OptionalNullable[List[TrackingCategoryMappingInfo]],
        pydantic.Field(alias="trackingCategories"),
    ] = UNSET
    r"""Array of available tracking categories for mapping."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "accounts",
            "expenseProvider",
            "taxRates",
            "trackingCategories",
        ]
        nullable_fields = [
            "accounts",
            "expenseProvider",
            "taxRates",
            "trackingCategories",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
