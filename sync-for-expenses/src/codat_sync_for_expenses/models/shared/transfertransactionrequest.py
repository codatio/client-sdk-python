"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_sync_for_expenses.types import BaseModel
from codat_sync_for_expenses.utils import serialize_decimal, validate_decimal
from decimal import Decimal
import pydantic
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AccountReferenceTypedDict(TypedDict):
    r"""Reference of the account you are transferring money from."""

    id: str
    r"""'id' from the Accounts data type."""


class AccountReference(BaseModel):
    r"""Reference of the account you are transferring money from."""

    id: str
    r"""'id' from the Accounts data type."""


class FromTypedDict(TypedDict):
    account_ref: AccountReferenceTypedDict
    r"""Reference of the account you are transferring money from."""
    amount: Decimal
    r"""Amount that has been transferred from the account in the native currency of the account."""


class From(BaseModel):
    account_ref: Annotated[AccountReference, pydantic.Field(alias="accountRef")]
    r"""Reference of the account you are transferring money from."""

    amount: Annotated[
        Decimal,
        BeforeValidator(validate_decimal),
        PlainSerializer(serialize_decimal(False)),
    ]
    r"""Amount that has been transferred from the account in the native currency of the account."""


class TransferTransactionRequestAccountReferenceTypedDict(TypedDict):
    r"""Reference of the account you are transferring money to."""

    id: str
    r"""'id' from the Accounts data type."""


class TransferTransactionRequestAccountReference(BaseModel):
    r"""Reference of the account you are transferring money to."""

    id: str
    r"""'id' from the Accounts data type."""


class ToTypedDict(TypedDict):
    account_ref: TransferTransactionRequestAccountReferenceTypedDict
    r"""Reference of the account you are transferring money to."""
    amount: Decimal
    r"""Amount that has been transferred to the account in the native currency of the account."""


class To(BaseModel):
    account_ref: Annotated[
        TransferTransactionRequestAccountReference, pydantic.Field(alias="accountRef")
    ]
    r"""Reference of the account you are transferring money to."""

    amount: Annotated[
        Decimal,
        BeforeValidator(validate_decimal),
        PlainSerializer(serialize_decimal(False)),
    ]
    r"""Amount that has been transferred to the account in the native currency of the account."""


class TransferTransactionRequestTypedDict(TypedDict):
    date_: str
    from_: FromTypedDict
    to: ToTypedDict
    description: NotRequired[str]
    r"""Any private, company notes about the transaction."""


class TransferTransactionRequest(BaseModel):
    date_: Annotated[str, pydantic.Field(alias="date")]

    from_: Annotated[From, pydantic.Field(alias="from")]

    to: To

    description: Optional[str] = None
    r"""Any private, company notes about the transaction."""
