"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_sync_for_expenses.types import BaseModel
from enum import Enum
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TrackingRefAdjustmentTransactionDataType(str, Enum):
    r"""The type of the linked reference"""

    TRACKING_CATEGORIES = "trackingCategories"
    CUSTOMERS = "customers"
    SUPPLIERS = "suppliers"


class TrackingRefAdjustmentTransactionTypedDict(TypedDict):
    data_type: NotRequired[TrackingRefAdjustmentTransactionDataType]
    r"""The type of the linked reference"""
    id: NotRequired[str]
    r"""Unique identifier of the linked reference from mapping options or the unique identifier of the linked customer or supplier."""


class TrackingRefAdjustmentTransaction(BaseModel):
    data_type: Annotated[
        Optional[TrackingRefAdjustmentTransactionDataType],
        pydantic.Field(alias="dataType"),
    ] = TrackingRefAdjustmentTransactionDataType.TRACKING_CATEGORIES
    r"""The type of the linked reference"""

    id: Optional[str] = None
    r"""Unique identifier of the linked reference from mapping options or the unique identifier of the linked customer or supplier."""
