"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .validfor import ValidFor
from .validtransactiontypes import ValidTransactionTypes
from codat_sync_for_expenses.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AccountMappingInfoAccountType(str, Enum):
    r"""Type of the account."""

    ASSET = "Asset"
    LIABILITY = "Liability"
    INCOME = "Income"
    EXPENSE = "Expense"
    EQUITY = "Equity"


class AccountMappingInfoTypedDict(TypedDict):
    account_type: NotRequired[AccountMappingInfoAccountType]
    r"""Type of the account."""
    currency: NotRequired[str]
    r"""Currency of the account."""
    fully_qualified_category: NotRequired[str]
    r"""Full account type and category of the account"""
    id: NotRequired[str]
    r"""Unique identifier of account."""
    is_bank_account: NotRequired[bool]
    r"""Confirms whether the account is a bank account or not."""
    name: NotRequired[str]
    r"""Name of the account as it appears in the company's accounting software."""
    nominal_code: NotRequired[Nullable[str]]
    r"""Code used to identify each nominal account in the accounting software."""
    valid_for: NotRequired[List[ValidFor]]
    r"""Supported endpoints for the account."""
    valid_transaction_types: NotRequired[List[ValidTransactionTypes]]
    r"""Supported transaction types for the account."""


class AccountMappingInfo(BaseModel):
    account_type: Annotated[
        Optional[AccountMappingInfoAccountType], pydantic.Field(alias="accountType")
    ] = None
    r"""Type of the account."""

    currency: Optional[str] = None
    r"""Currency of the account."""

    fully_qualified_category: Annotated[
        Optional[str], pydantic.Field(alias="fullyQualifiedCategory")
    ] = None
    r"""Full account type and category of the account"""

    id: Optional[str] = None
    r"""Unique identifier of account."""

    is_bank_account: Annotated[
        Optional[bool], pydantic.Field(alias="isBankAccount")
    ] = None
    r"""Confirms whether the account is a bank account or not."""

    name: Optional[str] = None
    r"""Name of the account as it appears in the company's accounting software."""

    nominal_code: Annotated[
        OptionalNullable[str], pydantic.Field(alias="nominalCode")
    ] = UNSET
    r"""Code used to identify each nominal account in the accounting software."""

    valid_for: Annotated[Optional[List[ValidFor]], pydantic.Field(alias="validFor")] = (
        None
    )
    r"""Supported endpoints for the account."""

    valid_transaction_types: Annotated[
        Optional[List[ValidTransactionTypes]],
        pydantic.Field(alias="validTransactionTypes"),
    ] = None
    r"""Supported transaction types for the account."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "accountType",
            "currency",
            "fullyQualifiedCategory",
            "id",
            "isBankAccount",
            "name",
            "nominalCode",
            "validFor",
            "validTransactionTypes",
        ]
        nullable_fields = ["nominalCode"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
