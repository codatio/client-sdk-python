"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
from codat_sync_for_expenses import utils
from codat_sync_for_expenses._hooks import SDKHooks
from codat_sync_for_expenses.accounts import Accounts
from codat_sync_for_expenses.adjustments import Adjustments
from codat_sync_for_expenses.attachments import Attachments
from codat_sync_for_expenses.bank_accounts import BankAccounts
from codat_sync_for_expenses.companies import Companies
from codat_sync_for_expenses.company_info import CompanyInfo
from codat_sync_for_expenses.configuration import Configuration
from codat_sync_for_expenses.connections import Connections
from codat_sync_for_expenses.customers import Customers
from codat_sync_for_expenses.expenses import Expenses
from codat_sync_for_expenses.manage_data import ManageData
from codat_sync_for_expenses.mapping_options import MappingOptions
from codat_sync_for_expenses.models import shared
from codat_sync_for_expenses.push_operations import PushOperations
from codat_sync_for_expenses.reimbursements import Reimbursements
from codat_sync_for_expenses.suppliers import Suppliers
from codat_sync_for_expenses.sync import Sync
from codat_sync_for_expenses.transaction_status import TransactionStatus
from codat_sync_for_expenses.transfers import Transfers
from codat_sync_for_expenses.types import OptionalNullable, UNSET
import httpx
from typing import Callable, Dict, Optional, Union


class CodatSyncExpenses(BaseSDK):
    r"""Sync for Expenses: The API for Sync for Expenses.

    Sync for Expenses is an API and a set of supporting tools. It has been built to
    enable corporate card and expense management platforms to provide high-quality
    integrations with multiple accounting software through a standardized API.

    [Explore product](https://docs.codat.io/sync-for-expenses/overview) | [See our OpenAPI spec](https://github.com/codatio/oas)

    Not seeing the endpoints you're expecting? We've [reorganized our products](https://docs.codat.io/updates/230901-new-products), and you may be using a [different version of Sync for Expenses](https://docs.codat.io/sync-for-expenses-v1-api#/).

    ---
    <!-- Start Codat Tags Table -->
    ## Endpoints

    | Endpoints | Description |
    | :- |:- |
    | Companies | Create and manage your SMB users' companies. |
    | Connections | Create new and manage existing data connections for a company. |
    | Configuration | View and manage mapping configuration and defaults for expense transactions. |
    | Sync | Monitor the status of data syncs. |
    | Expenses | Create and update transactions that represent your customers' spend. |
    | Transfers | Create and update transactions that represent the movement of your customers' money. |
    | Reimbursements | Create and update transactions that represent your customers' repayable spend. |
    | Attachments | Attach receipts to a transaction for a complete audit trail. |
    | Transaction status | Monitor the status of individual transactions in data syncs. |
    | Manage data | Control and monitor the retrieval of data from an integration. |
    | Push operations | View historic push operations. |
    | Accounts | Create accounts and view account schemas. |
    | Customers | Get, create, and update customers. |
    | Suppliers | Get, create, and update suppliers. |
    <!-- End Codat Tags Table -->
    """

    companies: Companies
    r"""Create and manage your SMB users' companies."""
    connections: Connections
    r"""Create new and manage existing data connections for a company."""
    bank_accounts: BankAccounts
    r"""Create bank accounts and view create bank account options."""
    accounts: Accounts
    r"""Create accounts and view create account options."""
    customers: Customers
    r"""Get, create, and update customers."""
    suppliers: Suppliers
    r"""Get, create, and update suppliers."""
    manage_data: ManageData
    r"""Control and monitor the retrieval of data from an integration."""
    company_info: CompanyInfo
    r"""View the company information of your customers' linked accounting software."""
    push_operations: PushOperations
    r"""View historic push operations."""
    adjustments: Adjustments
    r"""Create transactions that represent your adjustments to your customers' spend."""
    configuration: Configuration
    r"""View and manage mapping configuration and defaults for expense transactions."""
    expenses: Expenses
    r"""Create and update transactions that represent your customers' spend."""
    mapping_options: MappingOptions
    r"""Get accounts, trackingCategories and taxRates that can be used in your create and update requests."""
    reimbursements: Reimbursements
    r"""Create and update transactions that represent your customers' repayable spend."""
    sync: Sync
    r"""Monitor the status of data syncs."""
    transaction_status: TransactionStatus
    r"""Monitor the status of individual transactions in data syncs."""
    attachments: Attachments
    r"""Attach receipts to a transaction for a complete audit trail."""
    transfers: Transfers
    r"""Create and update transactions that represent the movement of your customers' money."""

    def __init__(
        self,
        security: Union[shared.Security, Callable[[], shared.Security]],
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                async_client=async_client,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()

    def _init_sdks(self):
        self.companies = Companies(self.sdk_configuration)
        self.connections = Connections(self.sdk_configuration)
        self.bank_accounts = BankAccounts(self.sdk_configuration)
        self.accounts = Accounts(self.sdk_configuration)
        self.customers = Customers(self.sdk_configuration)
        self.suppliers = Suppliers(self.sdk_configuration)
        self.manage_data = ManageData(self.sdk_configuration)
        self.company_info = CompanyInfo(self.sdk_configuration)
        self.push_operations = PushOperations(self.sdk_configuration)
        self.adjustments = Adjustments(self.sdk_configuration)
        self.configuration = Configuration(self.sdk_configuration)
        self.expenses = Expenses(self.sdk_configuration)
        self.mapping_options = MappingOptions(self.sdk_configuration)
        self.reimbursements = Reimbursements(self.sdk_configuration)
        self.sync = Sync(self.sdk_configuration)
        self.transaction_status = TransactionStatus(self.sdk_configuration)
        self.attachments = Attachments(self.sdk_configuration)
        self.transfers = Transfers(self.sdk_configuration)

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.sdk_configuration.client is not None:
            self.sdk_configuration.client.close()

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.sdk_configuration.async_client is not None:
            await self.sdk_configuration.async_client.aclose()
