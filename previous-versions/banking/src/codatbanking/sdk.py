"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .account_balances import AccountBalances
from .accounts import Accounts
from .sdkconfiguration import SDKConfiguration
from .transaction_categories import TransactionCategories
from .transactions import Transactions
from codatbanking import utils
from codatbanking.models import shared
from typing import Dict

class CodatBanking:
    r"""Banking API: Codat's standardized API for accessing banking data.
    Codat's Banking API allows you to access standardised data from over bank accounts via third party providers.

    Standardize how you connect to your customersâ€™ bank accounts. Retrieve bank account and bank transaction data in the same way via our partnerships with Plaid and TrueLayer.

    [Read more...](https://docs.codat.io/banking-api/overview)

    [See our OpenAPI spec](https://github.com/codatio/oas)
    """
    account_balances: AccountBalances
    r"""Balances for a bank account including end-of-day batch balance or running balances per transaction."""
    accounts: Accounts
    r"""Where payments are made or received, and bank transactions are recorded."""
    transaction_categories: TransactionCategories
    r"""Hierarchical categories associated with a transaction for greater contextual meaning to transaction activity."""
    transactions: Transactions
    r"""An immutable source of up-to-date information on income and expenditure."""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 security: shared.Security = None,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: Dict[str, str] = None,
                 client: requests_http.Session = None,
                 retry_config: utils.RetryConfig = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()
        
        
        security_client = utils.configure_security_client(client, security)
        
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security_client, server_url, server_idx, retry_config=retry_config)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.account_balances = AccountBalances(self.sdk_configuration)
        self.accounts = Accounts(self.sdk_configuration)
        self.transaction_categories = TransactionCategories(self.sdk_configuration)
        self.transactions = Transactions(self.sdk_configuration)
    