"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
from codat_banking import models, utils
from codat_banking._hooks import SDKHooks
from codat_banking.account_balances_sdk import AccountBalancesSDK
from codat_banking.accounts_sdk import AccountsSDK
from codat_banking.transaction_categories_sdk import TransactionCategoriesSDK
from codat_banking.transactions_sdk import TransactionsSDK
from codat_banking.types import OptionalNullable, UNSET
import httpx
from typing import Callable, Dict, Optional, Union


class CodatBanking(BaseSDK):
    r"""Banking API: Codat's standardized API for accessing banking data.

    > ### New to Codat?
    >
    > Our Banking API reference is relevant only to our existing clients.
    > Please reach out to your Codat contact so that we can find the right product for you.

    Codat's Banking API allows you to access standardised data from over bank accounts via third party providers.

    Standardize how you connect to your customersâ€™ bank accounts. Retrieve bank account and bank transaction data in the same way via our partnerships with Plaid and TrueLayer.

    <!-- Start Codat Tags Table -->
    ## Endpoints

    | Endpoints | Description |
    | :- |:- |
    | Accounts | Where payments are made or received, and bank transactions are recorded. |
    | Account balances | Balances for a bank account including end-of-day batch balance or running balances per transaction. |
    | Transactions | An immutable source of up-to-date information on income and expenditure. |
    | Transaction categories | Hierarchical categories associated with a transaction for greater contextual meaning to transaction activity. |
    <!-- End Codat Tags Table -->

    [Read more...](https://docs.codat.io/banking-api/overview)

    [See our OpenAPI spec](https://github.com/codatio/oas)
    """

    account_balances: AccountBalancesSDK
    r"""Balances for a bank account including end-of-day batch balance or running balances per transaction."""
    accounts: AccountsSDK
    r"""Where payments are made or received, and bank transactions are recorded."""
    transaction_categories: TransactionCategoriesSDK
    r"""Hierarchical categories associated with a transaction for greater contextual meaning to transaction activity."""
    transactions: TransactionsSDK
    r"""An immutable source of up-to-date information on income and expenditure."""

    def __init__(
        self,
        security: Union[models.Security, Callable[[], models.Security]],
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                async_client=async_client,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()

    def _init_sdks(self):
        self.account_balances = AccountBalancesSDK(self.sdk_configuration)
        self.accounts = AccountsSDK(self.sdk_configuration)
        self.transaction_categories = TransactionCategoriesSDK(self.sdk_configuration)
        self.transactions = TransactionsSDK(self.sdk_configuration)
