"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
from codat_common import models, utils
from codat_common._hooks import SDKHooks
from codat_common.companies_sdk import CompaniesSDK
from codat_common.connection_management import ConnectionManagement
from codat_common.connections_sdk import ConnectionsSDK
from codat_common.custom_data_type import CustomDataType
from codat_common.groups_sdk import GroupsSDK
from codat_common.integrations_sdk import IntegrationsSDK
from codat_common.push_data import PushData
from codat_common.refresh_data import RefreshData
from codat_common.settings import Settings
from codat_common.supplemental_data import SupplementalData
from codat_common.types import OptionalNullable, UNSET
from codat_common.webhooks_sdk import WebhooksSDK
import httpx
from typing import Any, Callable, Dict, Optional, Union


class CodatCommon(BaseSDK):
    r"""Platform API: Platform API

    An API for the common components of all of Codat's products.

    These end points cover creating and managing your companies, data connections, and integrations.

    [Read about the building blocks of Codat...](https://docs.codat.io/core-concepts/companies) | [See our OpenAPI spec](https://github.com/codatio/oas)

    ---
    <!-- Start Codat Tags Table -->
    ## Endpoints

    | Endpoints | Description |
    | :- |:- |
    | Companies | Create and manage your SMB users' companies. |
    | Connections | Create new and manage existing data connections for a company. |
    | Connection management | Configure connection management UI and retrieve access tokens for authentication. |
    | Groups | Define and manage sets of companies based on a chosen characteristic. |
    | Webhooks | Create and manage webhooks that listen to Codat's events. |
    | Integrations | Get a list of integrations supported by Codat and their logos. |
    | Refresh data | Initiate data refreshes, view pull status and history. |
    | Settings | Manage company profile configuration, sync settings, and API keys. |
    | Push data | Initiate and monitor Create, Update, and Delete operations. |
    | Supplemental data | Configure and pull additional data you can include in Codat's standard data types. |
    | Custom data type | Configure and pull additional data types that are not included in Codat's standardized data model. |
    <!-- End Codat Tags Table -->
    """

    settings: Settings
    r"""Manage company profile configuration, sync settings, and API keys."""
    companies: CompaniesSDK
    r"""Create and manage your SMB users' companies."""
    connection_management: ConnectionManagement
    r"""Configure UI and retrieve access tokens for authentication used by **Connections SDK**."""
    connections: ConnectionsSDK
    r"""Create new and manage existing data connections for a company."""
    custom_data_type: CustomDataType
    r"""Configure and pull additional data types that are not included in Codat's standardized data model."""
    push_data: PushData
    r"""Initiate and monitor Create, Update, and Delete operations."""
    refresh_data: RefreshData
    r"""Initiate data refreshes, view pull status and history."""
    groups: GroupsSDK
    r"""Define and manage sets of companies based on a chosen characteristic."""
    integrations: IntegrationsSDK
    r"""Get a list of integrations supported by Codat and their logos."""
    supplemental_data: SupplementalData
    r"""Configure and pull additional data you can include in Codat's standard data types."""
    webhooks: WebhooksSDK
    r"""Create and manage webhooks that listen to Codat's events."""

    def __init__(
        self,
        auth_header: Union[str, Callable[[], str]],
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param auth_header: The auth_header required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security: Any = None
        if callable(auth_header):
            security = lambda: models.Security(auth_header=auth_header())  # pylint: disable=unnecessary-lambda-assignment
        else:
            security = models.Security(auth_header=auth_header)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                async_client=async_client,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()

    def _init_sdks(self):
        self.settings = Settings(self.sdk_configuration)
        self.companies = CompaniesSDK(self.sdk_configuration)
        self.connection_management = ConnectionManagement(self.sdk_configuration)
        self.connections = ConnectionsSDK(self.sdk_configuration)
        self.custom_data_type = CustomDataType(self.sdk_configuration)
        self.push_data = PushData(self.sdk_configuration)
        self.refresh_data = RefreshData(self.sdk_configuration)
        self.groups = GroupsSDK(self.sdk_configuration)
        self.integrations = IntegrationsSDK(self.sdk_configuration)
        self.supplemental_data = SupplementalData(self.sdk_configuration)
        self.webhooks = WebhooksSDK(self.sdk_configuration)
