"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_commerce.types import BaseModel
from codat_commerce.utils import serialize_decimal, validate_decimal
from decimal import Decimal
import pydantic
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class TaxComponentTypedDict(TypedDict):
    r"""The Tax Components endpoints return tax rates data from the commerce software, including tax rate names and values. This is to support the mapping of tax rates from the commerce software to those in the accounting software.

    Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-disputes) for this data type.
    """

    id: str
    r"""A unique, persistent identifier for this record"""
    is_compound: NotRequired[bool]
    r"""The Boolean flag to indicate when a Tax Rate Component compounds on a sale."""
    modified_date: NotRequired[str]
    name: NotRequired[str]
    r"""Name of the Tax Rate Component in the source commerce software."""
    rate: NotRequired[Decimal]
    r"""Rate of taxation represented as a fraction of the net price (typically in the range 0.00 - 1.00)."""
    source_modified_date: NotRequired[str]


class TaxComponent(BaseModel):
    r"""The Tax Components endpoints return tax rates data from the commerce software, including tax rate names and values. This is to support the mapping of tax rates from the commerce software to those in the accounting software.

    Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-disputes) for this data type.
    """

    id: str
    r"""A unique, persistent identifier for this record"""

    is_compound: Annotated[Optional[bool], pydantic.Field(alias="isCompound")] = None
    r"""The Boolean flag to indicate when a Tax Rate Component compounds on a sale."""

    modified_date: Annotated[Optional[str], pydantic.Field(alias="modifiedDate")] = None

    name: Optional[str] = None
    r"""Name of the Tax Rate Component in the source commerce software."""

    rate: Annotated[
        Optional[Decimal],
        BeforeValidator(validate_decimal),
        PlainSerializer(serialize_decimal(False)),
    ] = None
    r"""Rate of taxation represented as a fraction of the net price (typically in the range 0.00 - 1.00)."""

    source_modified_date: Annotated[
        Optional[str], pydantic.Field(alias="sourceModifiedDate")
    ] = None
