"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .commercecustomerref import CommerceCustomerRef, CommerceCustomerRefTypedDict
from .locationref import LocationRef, LocationRefTypedDict
from .orderlineitem import OrderLineItem, OrderLineItemTypedDict
from .paymentref import PaymentRef, PaymentRefTypedDict
from .servicecharge import ServiceCharge, ServiceChargeTypedDict
from .supplementaldata import SupplementalData, SupplementalDataTypedDict
from codat_commerce.types import BaseModel
from codat_commerce.utils import serialize_decimal, validate_decimal
from decimal import Decimal
import pydantic
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class OrderTypedDict(TypedDict):
    r"""Orders contain the transaction details for all products sold by the company, and include details of any payments, service charges, or refunds related to each order. You can use data from the Orders endpoints to calculate key metrics, such as gross sales values and monthly recurring revenue (MRR).

    Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-orders) for this data type.

    """

    id: str
    r"""A unique, persistent identifier for this record"""
    closed_date: NotRequired[str]
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """
    country: NotRequired[str]
    r"""The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.

    Depending on the platform the value of this property will either be an <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\" target=\"_blank\">ISO 3166</a> code (2-alpha or 3-alpha) or free-form text returned as a string name in our model.

    For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/codat-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.
    """
    created_date: NotRequired[str]
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """
    currency: NotRequired[str]
    customer_ref: NotRequired[CommerceCustomerRefTypedDict]
    r"""Reference to the customer that placed the order."""
    location_ref: NotRequired[LocationRefTypedDict]
    r"""Reference to the geographic location where the order was placed."""
    modified_date: NotRequired[str]
    order_line_items: NotRequired[List[OrderLineItemTypedDict]]
    order_number: NotRequired[str]
    r"""Friendly reference for the order in the commerce or point of sale platform."""
    payments: NotRequired[List[PaymentRefTypedDict]]
    service_charges: NotRequired[List[ServiceChargeTypedDict]]
    source_modified_date: NotRequired[str]
    supplemental_data: NotRequired[SupplementalDataTypedDict]
    r"""Supplemental data is additional data you can include in our standard data types.

    It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
    """
    total_amount: NotRequired[Decimal]
    r"""Total amount of the order, including discounts, refunds, and tax, but excluding gratuities."""
    total_discount: NotRequired[Decimal]
    r"""Total amount of any discounts applied to the order, excluding tax. This is typically positive (for discounts which decrease the amount of the order), but can also be negative (for discounts which increase the amount of the order)."""
    total_gratuity: NotRequired[Decimal]
    r"""Extra amount added to the order."""
    total_refund: NotRequired[Decimal]
    r"""Total amount of any refunds issued on the order, including discounts and tax, but excluding gratuities. This is always negative."""
    total_tax_amount: NotRequired[Decimal]
    r"""Total amount of tax applied to the order."""


class Order(BaseModel):
    r"""Orders contain the transaction details for all products sold by the company, and include details of any payments, service charges, or refunds related to each order. You can use data from the Orders endpoints to calculate key metrics, such as gross sales values and monthly recurring revenue (MRR).

    Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-orders) for this data type.

    """

    id: str
    r"""A unique, persistent identifier for this record"""

    closed_date: Annotated[Optional[str], pydantic.Field(alias="closedDate")] = None
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """

    country: Optional[str] = None
    r"""The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.

    Depending on the platform the value of this property will either be an <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\" target=\"_blank\">ISO 3166</a> code (2-alpha or 3-alpha) or free-form text returned as a string name in our model.

    For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/codat-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.
    """

    created_date: Annotated[Optional[str], pydantic.Field(alias="createdDate")] = None
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """

    currency: Optional[str] = None

    customer_ref: Annotated[
        Optional[CommerceCustomerRef], pydantic.Field(alias="customerRef")
    ] = None
    r"""Reference to the customer that placed the order."""

    location_ref: Annotated[
        Optional[LocationRef], pydantic.Field(alias="locationRef")
    ] = None
    r"""Reference to the geographic location where the order was placed."""

    modified_date: Annotated[Optional[str], pydantic.Field(alias="modifiedDate")] = None

    order_line_items: Annotated[
        Optional[List[OrderLineItem]], pydantic.Field(alias="orderLineItems")
    ] = None

    order_number: Annotated[Optional[str], pydantic.Field(alias="orderNumber")] = None
    r"""Friendly reference for the order in the commerce or point of sale platform."""

    payments: Optional[List[PaymentRef]] = None

    service_charges: Annotated[
        Optional[List[ServiceCharge]], pydantic.Field(alias="serviceCharges")
    ] = None

    source_modified_date: Annotated[
        Optional[str], pydantic.Field(alias="sourceModifiedDate")
    ] = None

    supplemental_data: Annotated[
        Optional[SupplementalData], pydantic.Field(alias="supplementalData")
    ] = None
    r"""Supplemental data is additional data you can include in our standard data types.

    It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
    """

    total_amount: Annotated[
        Annotated[
            Optional[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="totalAmount"),
    ] = None
    r"""Total amount of the order, including discounts, refunds, and tax, but excluding gratuities."""

    total_discount: Annotated[
        Annotated[
            Optional[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="totalDiscount"),
    ] = None
    r"""Total amount of any discounts applied to the order, excluding tax. This is typically positive (for discounts which decrease the amount of the order), but can also be negative (for discounts which increase the amount of the order)."""

    total_gratuity: Annotated[
        Annotated[
            Optional[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="totalGratuity"),
    ] = None
    r"""Extra amount added to the order."""

    total_refund: Annotated[
        Annotated[
            Optional[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="totalRefund"),
    ] = None
    r"""Total amount of any refunds issued on the order, including discounts and tax, but excluding gratuities. This is always negative."""

    total_tax_amount: Annotated[
        Annotated[
            Optional[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="totalTaxAmount"),
    ] = None
    r"""Total amount of tax applied to the order."""
