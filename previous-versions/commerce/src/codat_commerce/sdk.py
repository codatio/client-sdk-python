"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
from codat_commerce import models, utils
from codat_commerce._hooks import SDKHooks
from codat_commerce.company_info_sdk import CompanyInfoSDK
from codat_commerce.customers_sdk import CustomersSDK
from codat_commerce.disputes_sdk import DisputesSDK
from codat_commerce.locations_sdk import LocationsSDK
from codat_commerce.orders_sdk import OrdersSDK
from codat_commerce.payments_sdk import PaymentsSDK
from codat_commerce.products_sdk import ProductsSDK
from codat_commerce.tax_components_sdk import TaxComponentsSDK
from codat_commerce.transactions_sdk import TransactionsSDK
from codat_commerce.types import OptionalNullable, UNSET
import httpx
from typing import Any, Callable, Dict, Optional, Union


class CodatCommerce(BaseSDK):
    r"""Commerce API: Codat's standardized API for accessing commerce data

    > ### New to Codat?
    >
    > Our Commerce API reference is relevant only to our existing clients.
    > Please reach out to your Codat contact so that we can find the right product for you.

    Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.

    Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce software.

    <!-- Start Codat Tags Table -->
    ## Endpoints

    | Endpoints | Description |
    | :- |:- |
    | Customers | Retrieve standardized data from linked commerce software. |
    | Disputes | Retrieve standardized data from linked commerce software. |
    | Company info | Retrieve standardized data from linked commerce software. |
    | Locations | Retrieve standardized data from linked commerce software. |
    | Orders | Retrieve standardized data from linked commerce software. |
    | Payments | Retrieve standardized data from linked commerce software. |
    | Products | Retrieve standardized data from linked commerce software. |
    | Tax components | Retrieve standardized data from linked commerce software. |
    | Transactions | Retrieve standardized data from linked commerce software. |
    <!-- End Codat Tags Table -->

    [Read more...](https://docs.codat.io/commerce-api/overview)

    [See our OpenAPI spec](https://github.com/codatio/oas)
    """

    customers: CustomersSDK
    r"""Retrieve standardized data from linked commerce software."""
    disputes: DisputesSDK
    r"""Retrieve standardized data from linked commerce software."""
    company_info: CompanyInfoSDK
    r"""Retrieve standardized data from linked commerce software."""
    locations: LocationsSDK
    r"""Retrieve standardized data from linked commerce software."""
    orders: OrdersSDK
    r"""Retrieve standardized data from linked commerce software."""
    payments: PaymentsSDK
    r"""Retrieve standardized data from linked commerce software."""
    products: ProductsSDK
    r"""Retrieve standardized data from linked commerce software."""
    tax_components: TaxComponentsSDK
    r"""Retrieve standardized data from linked commerce software."""
    transactions: TransactionsSDK
    r"""Retrieve standardized data from linked commerce software."""

    def __init__(
        self,
        auth_header: Union[str, Callable[[], str]],
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param auth_header: The auth_header required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security: Any = None
        if callable(auth_header):
            security = lambda: models.Security(auth_header=auth_header())  # pylint: disable=unnecessary-lambda-assignment
        else:
            security = models.Security(auth_header=auth_header)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                async_client=async_client,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()

    def _init_sdks(self):
        self.customers = CustomersSDK(self.sdk_configuration)
        self.disputes = DisputesSDK(self.sdk_configuration)
        self.company_info = CompanyInfoSDK(self.sdk_configuration)
        self.locations = LocationsSDK(self.sdk_configuration)
        self.orders = OrdersSDK(self.sdk_configuration)
        self.payments = PaymentsSDK(self.sdk_configuration)
        self.products = ProductsSDK(self.sdk_configuration)
        self.tax_components = TaxComponentsSDK(self.sdk_configuration)
        self.transactions = TransactionsSDK(self.sdk_configuration)
