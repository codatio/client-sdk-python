"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .company_info import CompanyInfo
from .customers import Customers
from .disputes import Disputes
from .locations import Locations
from .orders import Orders
from .payments import Payments
from .products import Products
from .sdkconfiguration import SDKConfiguration
from .tax_components import TaxComponents
from .transactions import Transactions
from codatcommerce import utils
from codatcommerce.models import shared
from typing import Dict

class CodatCommerce:
    r"""Commerce API: Codat's standardized API for accessing commerce data
    Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.

    Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.

    [Read more...](https://docs.codat.io/commerce-api/overview)

    [See our OpenAPI spec](https://github.com/codatio/oas)
    """
    company_info: CompanyInfo
    r"""Retrieve standardized data from linked commerce platforms."""
    customers: Customers
    r"""Retrieve standardized data from linked commerce platforms."""
    disputes: Disputes
    r"""Retrieve standardized data from linked commerce platforms."""
    locations: Locations
    r"""Retrieve standardized data from linked commerce platforms."""
    orders: Orders
    r"""Retrieve standardized data from linked commerce platforms."""
    payments: Payments
    r"""Retrieve standardized data from linked commerce platforms."""
    products: Products
    r"""Retrieve standardized data from linked commerce platforms."""
    tax_components: TaxComponents
    r"""Retrieve standardized data from linked commerce platforms."""
    transactions: Transactions
    r"""Retrieve standardized data from linked commerce platforms."""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 auth_header: str,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: Dict[str, str] = None,
                 client: requests_http.Session = None,
                 retry_config: utils.RetryConfig = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param auth_header: The auth_header required for authentication
        :type auth_header: str
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()
        
        
        security_client = utils.configure_security_client(client, shared.Security(auth_header = auth_header))
        
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security_client, server_url, server_idx, retry_config=retry_config)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.company_info = CompanyInfo(self.sdk_configuration)
        self.customers = Customers(self.sdk_configuration)
        self.disputes = Disputes(self.sdk_configuration)
        self.locations = Locations(self.sdk_configuration)
        self.orders = Orders(self.sdk_configuration)
        self.payments = Payments(self.sdk_configuration)
        self.products = Products(self.sdk_configuration)
        self.tax_components = TaxComponents(self.sdk_configuration)
        self.transactions = Transactions(self.sdk_configuration)
    