"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .accounting_accounts import AccountingAccounts
from .accounting_bank_accounts import AccountingBankAccounts
from .accounting_company_info import AccountingCompanyInfo
from .accounting_credit_notes import AccountingCreditNotes
from .accounting_customers import AccountingCustomers
from .accounting_direct_incomes import AccountingDirectIncomes
from .accounting_invoices import AccountingInvoices
from .accounting_journal_entries import AccountingJournalEntries
from .accounting_payments import AccountingPayments
from .commerce_company_info import CommerceCompanyInfo
from .commerce_customers import CommerceCustomers
from .commerce_locations import CommerceLocations
from .commerce_orders import CommerceOrders
from .commerce_payments import CommercePayments
from .commerce_products import CommerceProducts
from .commerce_transactions import CommerceTransactions
from .companies import Companies
from .company_management import CompanyManagement
from .configuration import Configuration
from .connections import Connections
from .integrations import Integrations
from .push_data import PushData
from .refresh_data import RefreshData
from .sdkconfiguration import SDKConfiguration
from .sync import Sync
from .sync_flow_preferences import SyncFlowPreferences
from codatsynccommerce import utils
from codatsynccommerce.models import shared
from typing import Dict

class CodatSyncCommerce:
    r"""Sync for Commerce (v1): The API for Sync for Commerce V1.

    Sync for Commerce automatically replicates and reconciles sales data from a merchantâ€™s source PoS, Payments, and eCommerce systems into their accounting software. This eliminates manual processing by merchants and transforms their ability to run and grow their business.

    [Read More...](https://docs.codat.io/commerce/overview)

    Not seeing what you expect? [See the main Sync for Commerce API](https://docs.codat.io/sync-for-commerce-api).
    """
    accounting_accounts: AccountingAccounts
    r"""Accounts"""
    accounting_bank_accounts: AccountingBankAccounts
    r"""Bank accounts"""
    accounting_company_info: AccountingCompanyInfo
    r"""Company info"""
    accounting_credit_notes: AccountingCreditNotes
    r"""Credit notes"""
    accounting_customers: AccountingCustomers
    r"""Customers"""
    accounting_direct_incomes: AccountingDirectIncomes
    r"""Direct incomes"""
    accounting_invoices: AccountingInvoices
    r"""Invoices"""
    accounting_journal_entries: AccountingJournalEntries
    r"""Journal entries"""
    accounting_payments: AccountingPayments
    r"""Payments"""
    commerce_company_info: CommerceCompanyInfo
    r"""Retrieve standardized data from linked commerce platforms."""
    commerce_customers: CommerceCustomers
    r"""Retrieve standardized data from linked commerce platforms."""
    commerce_locations: CommerceLocations
    r"""Retrieve standardized data from linked commerce platforms."""
    commerce_orders: CommerceOrders
    r"""Retrieve standardized data from linked commerce platforms."""
    commerce_payments: CommercePayments
    r"""Retrieve standardized data from linked commerce platforms."""
    commerce_products: CommerceProducts
    r"""Retrieve standardized data from linked commerce platforms."""
    commerce_transactions: CommerceTransactions
    r"""Retrieve standardized data from linked commerce platforms."""
    companies: Companies
    r"""Create and manage your Codat companies."""
    company_management: CompanyManagement
    r"""Create new and manage existing Sync for Commerce companies."""
    configuration: Configuration
    r"""Expressively configure preferences for any given Sync for Commerce company."""
    connections: Connections
    r"""Manage your companies' data connections."""
    integrations: Integrations
    r"""View useful information about codat's integrations."""
    push_data: PushData
    r"""View push options and get push statuses."""
    refresh_data: RefreshData
    r"""Asynchronously retrieve data from an integration to refresh data in Codat."""
    sync: Sync
    r"""Initiate a sync of Sync for Commerce company data into their respective accounting software."""
    sync_flow_preferences: SyncFlowPreferences
    r"""Configure preferences for any given Sync for Commerce company using sync flow."""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 security: shared.Security = None,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: Dict[str, str] = None,
                 client: requests_http.Session = None,
                 retry_config: utils.RetryConfig = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()
        
        
        security_client = utils.configure_security_client(client, security)
        
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security_client, server_url, server_idx, retry_config=retry_config)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.accounting_accounts = AccountingAccounts(self.sdk_configuration)
        self.accounting_bank_accounts = AccountingBankAccounts(self.sdk_configuration)
        self.accounting_company_info = AccountingCompanyInfo(self.sdk_configuration)
        self.accounting_credit_notes = AccountingCreditNotes(self.sdk_configuration)
        self.accounting_customers = AccountingCustomers(self.sdk_configuration)
        self.accounting_direct_incomes = AccountingDirectIncomes(self.sdk_configuration)
        self.accounting_invoices = AccountingInvoices(self.sdk_configuration)
        self.accounting_journal_entries = AccountingJournalEntries(self.sdk_configuration)
        self.accounting_payments = AccountingPayments(self.sdk_configuration)
        self.commerce_company_info = CommerceCompanyInfo(self.sdk_configuration)
        self.commerce_customers = CommerceCustomers(self.sdk_configuration)
        self.commerce_locations = CommerceLocations(self.sdk_configuration)
        self.commerce_orders = CommerceOrders(self.sdk_configuration)
        self.commerce_payments = CommercePayments(self.sdk_configuration)
        self.commerce_products = CommerceProducts(self.sdk_configuration)
        self.commerce_transactions = CommerceTransactions(self.sdk_configuration)
        self.companies = Companies(self.sdk_configuration)
        self.company_management = CompanyManagement(self.sdk_configuration)
        self.configuration = Configuration(self.sdk_configuration)
        self.connections = Connections(self.sdk_configuration)
        self.integrations = Integrations(self.sdk_configuration)
        self.push_data = PushData(self.sdk_configuration)
        self.refresh_data = RefreshData(self.sdk_configuration)
        self.sync = Sync(self.sdk_configuration)
        self.sync_flow_preferences = SyncFlowPreferences(self.sdk_configuration)
    