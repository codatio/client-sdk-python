"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .categories import Categories
from .data_integrity import DataIntegrity
from .excel_reports import ExcelReports
from .reports import Reports
from .sdkconfiguration import SDKConfiguration
from codatassess import utils
from codatassess.models import shared

class CodatAssess:
    r"""Assess API: Codat's financial insights API
    Codat's Assess API enable you to make smarter credit decisions on your small business customers. Assess enriches your customer's accounting, commerce and banking data to surface actionable insights you didn't have before.
    
    [Read more...](https://www.codat.io/assess/)
    
    [See our OpenAPI spec](https://github.com/codatio/oas)
    """
    categories: Categories
    r"""Categorisation"""
    data_integrity: DataIntegrity
    r"""Data integrity is important"""
    excel_reports: ExcelReports
    r"""Downloadable reports"""
    reports: Reports
    r"""Data integrity is important"""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 security: shared.Security = None,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        if client is None:
            client = requests_http.Session()
        
        security_client = utils.configure_security_client(client, security)
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security_client, server_url, server_idx)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.categories = Categories(self.sdk_configuration)
        self.data_integrity = DataIntegrity(self.sdk_configuration)
        self.excel_reports = ExcelReports(self.sdk_configuration)
        self.reports = Reports(self.sdk_configuration)
    