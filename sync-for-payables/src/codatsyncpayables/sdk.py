"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .bills import Bills
from .companies import Companies
from .connections import Connections
from .sdkconfiguration import SDKConfiguration
from codatsyncpayables import utils
from codatsyncpayables.models import shared
from typing import Callable, Dict, Union

class CodatSyncPayables:
    r"""Sync for Payables: The API for Sync for Payables.

    Sync for Payables is an API and a set of supporting tools built to help integrate with your customers' accounting software, and keep their supplier information, invoices, and payments in sync.

    [Explore product](https://docs.codat.io/payables/overview) | [See OpenAPI spec](https://github.com/codatio/oas)

    ---

    ## Endpoints

    | Endpoints            | Description                                                                                                |
    |:---------------------|:-----------------------------------------------------------------------------------------------------------|
    | Companies            | Create and manage your SMB users' companies.                                                               |
    | Connections          | Create new and manage existing data connections for a company.                                             |
    | Accounts             | Get, create, and update Accounts                                                           |
    | Bills                | Get, create, and update Bills                                                                          |
    | Bill credit notes    | Get, create, and update Bill credit notes                                                              |
    | Bill payments        | Get, create, and update Bill payments                                                                  |
    | Journals             | Get, create, and update Journals                                                                       |
    | Journal entries      | Get, create, and update Journal entries                                                                |
    | Payment methods      | Get, create, and update Payment methods                                                                |
    | Suppliers            | Get, create, and update Suppliers                                                                      |
    | Tax rates            | Get, create, and update Tax rates                                                                      |
    | Tracking categories  | Get, create, and update Tracking categories                                                            |
    | Push operations      | View historic push operations                                                         |
    | Company info         | View company profile from the source platform.                                                             |
    | Manage data          | Control how data is retrieved from an integration.                                                         |
    """
    companies: Companies
    r"""Create and manage your Codat companies."""
    bills: Bills
    r"""Bills"""
    connections: Connections
    r"""Manage your companies' data connections."""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 security: Union[shared.Security,Callable[[], shared.Security]] = None,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: Dict[str, str] = None,
                 client: requests_http.Session = None,
                 retry_config: utils.RetryConfig = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: Union[shared.Security,Callable[[], shared.Security]]
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security, server_url, server_idx, retry_config=retry_config)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.companies = Companies(self.sdk_configuration)
        self.bills = Bills(self.sdk_configuration)
        self.connections = Connections(self.sdk_configuration)
    