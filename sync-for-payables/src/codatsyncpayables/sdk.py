"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .accounts import Accounts
from .bill_credit_notes import BillCreditNotes
from .bill_payments import BillPayments
from .bills import Bills
from .companies import Companies
from .connections import Connections
from .journal_entries import JournalEntries
from .journals import Journals
from .manage_data import ManageData
from .payment_methods import PaymentMethods
from .push_operations import PushOperations
from .sdkconfiguration import SDKConfiguration
from .suppliers import Suppliers
from .tax_rates import TaxRates
from .tracking_categories import TrackingCategories
from codatsyncpayables import utils
from codatsyncpayables.models import shared

class CodatSyncPayables:
    r"""Sync for Payables: The API for Sync for Payables.

    Sync for Payables is an API and a set of supporting tools built to help integrate with your customers' accounting software, and keep their supplier information, invoices, and payments in sync.

    [Read More...](https://docs.codat.io/payables/overview)
    """
    accounts: Accounts
    r"""Accounts"""
    bill_credit_notes: BillCreditNotes
    r"""Bill credit notes"""
    bill_payments: BillPayments
    r"""Bill payments"""
    bills: Bills
    r"""Bills"""
    companies: Companies
    r"""Create and manage your Codat companies."""
    connections: Connections
    r"""Manage your companies' data connections."""
    journal_entries: JournalEntries
    r"""Journal entries"""
    journals: Journals
    r"""Journals"""
    manage_data: ManageData
    r"""Asynchronously retrieve data from an integration to refresh data in Codat."""
    payment_methods: PaymentMethods
    r"""Payment methods"""
    push_operations: PushOperations
    r"""Access create, update and delete operations made to an SMB's data connection."""
    suppliers: Suppliers
    r"""Suppliers"""
    tax_rates: TaxRates
    r"""Tax rates"""
    tracking_categories: TrackingCategories
    r"""Tracking categories"""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 security: shared.Security = None,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        if client is None:
            client = requests_http.Session()
        
        security_client = utils.configure_security_client(client, security)
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security_client, server_url, server_idx)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.accounts = Accounts(self.sdk_configuration)
        self.bill_credit_notes = BillCreditNotes(self.sdk_configuration)
        self.bill_payments = BillPayments(self.sdk_configuration)
        self.bills = Bills(self.sdk_configuration)
        self.companies = Companies(self.sdk_configuration)
        self.connections = Connections(self.sdk_configuration)
        self.journal_entries = JournalEntries(self.sdk_configuration)
        self.journals = Journals(self.sdk_configuration)
        self.manage_data = ManageData(self.sdk_configuration)
        self.payment_methods = PaymentMethods(self.sdk_configuration)
        self.push_operations = PushOperations(self.sdk_configuration)
        self.suppliers = Suppliers(self.sdk_configuration)
        self.tax_rates = TaxRates(self.sdk_configuration)
        self.tracking_categories = TrackingCategories(self.sdk_configuration)
    