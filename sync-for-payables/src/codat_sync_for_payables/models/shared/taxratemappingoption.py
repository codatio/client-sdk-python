"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_sync_for_payables.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from codat_sync_for_payables.utils import serialize_decimal, validate_decimal
from decimal import Decimal
from enum import Enum
import pydantic
from pydantic import model_serializer
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TaxRateStatus(str, Enum):
    r"""Status of the tax rate in the accounting software.
    - `Active` - An active tax rate in use by a company.
    - `Archived` - A tax rate that has been archived or is inactive in the accounting software.
    """

    ACTIVE = "Active"
    ARCHIVED = "Archived"


class TaxRateMappingOptionTypedDict(TypedDict):
    id: NotRequired[str]
    r"""Identifier for the tax rate, unique for the company in the accounting software."""
    name: NotRequired[Nullable[str]]
    r"""Codat-augmented name of the tax rate in the accounting software."""
    code: NotRequired[Nullable[str]]
    r"""Code for the tax rate from the accounting software."""
    effective_tax_rate: NotRequired[Nullable[Decimal]]
    r"""See Effective tax rates description."""
    total_tax_rate: NotRequired[Nullable[Decimal]]
    r"""Total (not compounded) sum of the components of a tax rate."""
    status: NotRequired[TaxRateStatus]
    r"""Status of the tax rate in the accounting software.
    - `Active` - An active tax rate in use by a company.
    - `Archived` - A tax rate that has been archived or is inactive in the accounting software.
    """


class TaxRateMappingOption(BaseModel):
    id: Optional[str] = None
    r"""Identifier for the tax rate, unique for the company in the accounting software."""

    name: OptionalNullable[str] = UNSET
    r"""Codat-augmented name of the tax rate in the accounting software."""

    code: OptionalNullable[str] = UNSET
    r"""Code for the tax rate from the accounting software."""

    effective_tax_rate: Annotated[
        Annotated[
            OptionalNullable[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="effectiveTaxRate"),
    ] = UNSET
    r"""See Effective tax rates description."""

    total_tax_rate: Annotated[
        Annotated[
            OptionalNullable[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="totalTaxRate"),
    ] = UNSET
    r"""Total (not compounded) sum of the components of a tax rate."""

    status: Optional[TaxRateStatus] = None
    r"""Status of the tax rate in the accounting software.
    - `Active` - An active tax rate in use by a company.
    - `Archived` - A tax rate that has been archived or is inactive in the accounting software.
    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "name",
            "code",
            "effectiveTaxRate",
            "totalTaxRate",
            "status",
        ]
        nullable_fields = ["name", "code", "effectiveTaxRate", "totalTaxRate"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
