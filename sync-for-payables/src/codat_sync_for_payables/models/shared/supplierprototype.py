"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .address import Address, AddressTypedDict
from .supplierstatus import SupplierStatus
from codat_sync_for_payables.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from codat_sync_for_payables.utils import serialize_decimal, validate_decimal
from decimal import Decimal
import pydantic
from pydantic import model_serializer
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import List
from typing_extensions import Annotated, NotRequired, TypedDict


class SupplierPrototypeTypedDict(TypedDict):
    supplier_name: str
    r"""Name of the supplier as recorded in the accounting system, typically the company name."""
    status: SupplierStatus
    r"""Status of the supplier."""
    contact_name: NotRequired[Nullable[str]]
    r"""Name of the main contact for the supplier."""
    email_address: NotRequired[Nullable[str]]
    r"""Email address that the supplier may be contacted on."""
    phone: NotRequired[Nullable[str]]
    r"""Phone number that the supplier may be contacted on."""
    addresses: NotRequired[Nullable[List[AddressTypedDict]]]
    r"""An array of Addresses."""
    balance: NotRequired[Nullable[Decimal]]
    r"""Amount outstanding against the supplier."""
    default_currency: NotRequired[Nullable[str]]
    r"""Default currency the supplier's transactional data is recorded in."""


class SupplierPrototype(BaseModel):
    supplier_name: Annotated[str, pydantic.Field(alias="supplierName")]
    r"""Name of the supplier as recorded in the accounting system, typically the company name."""

    status: SupplierStatus
    r"""Status of the supplier."""

    contact_name: Annotated[
        OptionalNullable[str], pydantic.Field(alias="contactName")
    ] = UNSET
    r"""Name of the main contact for the supplier."""

    email_address: Annotated[
        OptionalNullable[str], pydantic.Field(alias="emailAddress")
    ] = UNSET
    r"""Email address that the supplier may be contacted on."""

    phone: OptionalNullable[str] = UNSET
    r"""Phone number that the supplier may be contacted on."""

    addresses: OptionalNullable[List[Address]] = UNSET
    r"""An array of Addresses."""

    balance: Annotated[
        OptionalNullable[Decimal],
        BeforeValidator(validate_decimal),
        PlainSerializer(serialize_decimal(False)),
    ] = UNSET
    r"""Amount outstanding against the supplier."""

    default_currency: Annotated[
        OptionalNullable[str], pydantic.Field(alias="defaultCurrency")
    ] = UNSET
    r"""Default currency the supplier's transactional data is recorded in."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "contactName",
            "emailAddress",
            "phone",
            "addresses",
            "balance",
            "defaultCurrency",
        ]
        nullable_fields = [
            "contactName",
            "emailAddress",
            "phone",
            "addresses",
            "balance",
            "defaultCurrency",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
