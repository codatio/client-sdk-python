"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .addresstype import AddressType
from codat_sync_for_payables.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AddressTypedDict(TypedDict):
    type: NotRequired[AddressType]
    r"""The type of the address"""
    line1: NotRequired[Nullable[str]]
    r"""Line 1 of the customer address."""
    line2: NotRequired[Nullable[str]]
    r"""Line 2 of the customer address."""
    city: NotRequired[Nullable[str]]
    r"""City of the customer address."""
    region: NotRequired[Nullable[str]]
    r"""Region of the customer address."""
    country: NotRequired[Nullable[str]]
    r"""Country of the customer's address. For NetSuite, use the 2-digit [ISO 3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) country code."""
    postal_code: NotRequired[Nullable[str]]
    r"""Postal code or zip code."""


class Address(BaseModel):
    type: Optional[AddressType] = None
    r"""The type of the address"""

    line1: OptionalNullable[str] = UNSET
    r"""Line 1 of the customer address."""

    line2: OptionalNullable[str] = UNSET
    r"""Line 2 of the customer address."""

    city: OptionalNullable[str] = UNSET
    r"""City of the customer address."""

    region: OptionalNullable[str] = UNSET
    r"""Region of the customer address."""

    country: OptionalNullable[str] = UNSET
    r"""Country of the customer's address. For NetSuite, use the 2-digit [ISO 3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) country code."""

    postal_code: Annotated[
        OptionalNullable[str], pydantic.Field(alias="postalCode")
    ] = UNSET
    r"""Postal code or zip code."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "type",
            "line1",
            "line2",
            "city",
            "region",
            "country",
            "postalCode",
        ]
        nullable_fields = ["line1", "line2", "city", "region", "country", "postalCode"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
