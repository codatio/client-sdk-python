"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .billaccountref import BillAccountRef, BillAccountRefTypedDict
from .billtaxrateref import BillTaxRateRef, BillTaxRateRefTypedDict
from codat_sync_for_payables.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from codat_sync_for_payables.utils import serialize_decimal, validate_decimal
from decimal import Decimal
import pydantic
from pydantic import model_serializer
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class BillLineItemTypedDict(TypedDict):
    unit_amount: Decimal
    r"""Unit price of the goods or service."""
    quantity: Decimal
    r"""Number of units of goods or services received."""
    account_ref: BillAccountRefTypedDict
    r"""Reference to the account to which the line item is linked."""
    description: NotRequired[Nullable[str]]
    r"""Friendly name of the goods or services received."""
    tax_amount: NotRequired[Decimal]
    r"""Amount of tax applied to the line item."""
    total_amount: NotRequired[Nullable[Decimal]]
    r"""Total amount of the line, including tax."""
    tax_rate_ref: NotRequired[BillTaxRateRefTypedDict]
    r"""Reference to the tax rate to which the line item is linked."""


class BillLineItem(BaseModel):
    unit_amount: Annotated[
        Annotated[
            Decimal,
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="unitAmount"),
    ]
    r"""Unit price of the goods or service."""

    quantity: Annotated[
        Decimal,
        BeforeValidator(validate_decimal),
        PlainSerializer(serialize_decimal(False)),
    ]
    r"""Number of units of goods or services received."""

    account_ref: Annotated[BillAccountRef, pydantic.Field(alias="accountRef")]
    r"""Reference to the account to which the line item is linked."""

    description: OptionalNullable[str] = UNSET
    r"""Friendly name of the goods or services received."""

    tax_amount: Annotated[
        Annotated[
            Optional[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="taxAmount"),
    ] = None
    r"""Amount of tax applied to the line item."""

    total_amount: Annotated[
        Annotated[
            OptionalNullable[Decimal],
            BeforeValidator(validate_decimal),
            PlainSerializer(serialize_decimal(False)),
        ],
        pydantic.Field(alias="totalAmount"),
    ] = UNSET
    r"""Total amount of the line, including tax."""

    tax_rate_ref: Annotated[
        Optional[BillTaxRateRef], pydantic.Field(alias="taxRateRef")
    ] = None
    r"""Reference to the tax rate to which the line item is linked."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description", "taxAmount", "totalAmount", "taxRateRef"]
        nullable_fields = ["description", "totalAmount"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
