"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from codat.models import operations
from typing import Optional

class DataStatus:
    r"""Understand the state of data within Codat."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_companies_company_id_data_status(self, request: operations.GetCompaniesCompanyIDDataStatusRequest) -> operations.GetCompaniesCompanyIDDataStatusResponse:
        r"""Get data status
        Get the state of each data type for a company
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDDataStatusRequest, base_url, '/companies/{companyId}/dataStatus', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDDataStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCompaniesCompanyIDDataStatus200ApplicationJSON])
                res.get_companies_company_id_data_status_200_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCompaniesCompanyIDDataStatusUnauthorized])
                res.unauthorized = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCompaniesCompanyIDDataStatusNotFound])
                res.not_found = out

        return res

    def get_company_data_history(self, request: operations.GetCompanyDataHistoryRequest) -> operations.GetCompanyDataHistoryResponse:
        r"""Get pull operations
        Gets the pull operation history (datasets) for a given company.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompanyDataHistoryRequest, base_url, '/companies/{companyId}/data/history', request)
        
        query_params = utils.get_query_params(operations.GetCompanyDataHistoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompanyDataHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCompanyDataHistory200ApplicationJSON])
                res.get_company_data_history_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCompanyDataHistoryMalformedQuery])
                res.malformed_query = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCompanyDataHistoryUnauthorized])
                res.unauthorized = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCompanyDataHistoryNotFound])
                res.not_found = out

        return res

    def get_pull_operation(self, request: operations.GetPullOperationRequest) -> operations.GetPullOperationResponse:
        r"""Get pull operation
        Retrieve information about a single dataset or pull operation.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPullOperationRequest, base_url, '/companies/{companyId}/data/history/{datasetId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPullOperationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPullOperationPullOperation])
                res.pull_operation = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPullOperationUnauthorized])
                res.unauthorized = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPullOperationNotFound])
                res.not_found = out

        return res

    