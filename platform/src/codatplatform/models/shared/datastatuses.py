"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .datastatus import DataStatus
from codatplatform import utils
from dataclasses_json import Undefined, dataclass_json
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataStatuses:
    account_transactions: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountTransactions'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    balance_sheet: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balanceSheet'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    bank_accounts: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankAccounts'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    bank_transactions: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankTransactions'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    banking_account_balances: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('banking-accountBalances'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    banking_accounts: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('banking-accounts'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    banking_transaction_categories: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('banking-transactionCategories'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    banking_transactions: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('banking-transactions'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    bill_credit_notes: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billCreditNotes'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    bill_payments: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billPayments'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    bills: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bills'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    cash_flow_statement: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cashFlowStatement'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    chart_of_accounts: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chartOfAccounts'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    commerce_company_info: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commerce-companyInfo'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    commerce_customers: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commerce-customers'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    commerce_disputes: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commerce-disputes'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    commerce_locations: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commerce-locations'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    commerce_orders: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commerce-orders'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    commerce_payment_methods: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commerce-paymentMethods'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    commerce_payments: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commerce-payments'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    commerce_product_categories: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commerce-productCategories'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    commerce_products: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commerce-products'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    commerce_tax_components: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commerce-taxComponents'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    commerce_transactions: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commerce-transactions'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    company: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    credit_notes: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditNotes'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    customers: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customers'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    direct_costs: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directCosts'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    direct_incomes: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directIncomes'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    invoices: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoices'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    item_receipts: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemReceipts'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    items: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    journal_entries: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('journalEntries'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    journals: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('journals'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    payment_methods: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMethods'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    payments: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payments'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    profit_and_loss: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profitAndLoss'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    purchase_orders: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseOrders'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    sales_orders: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('salesOrders'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    suppliers: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suppliers'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    tax_rates: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxRates'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    tracking_categories: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingCategories'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    transfers: Optional[DataStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfers'), 'exclude': lambda f: f is None }})
    r"""Describes the state of data in the Codat cache for a company and data type"""
    

