"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.shared import customdatatyperecords as shared_customdatatyperecords
from typing import Optional


@dataclasses.dataclass
class GetCustomDataTypeConfigurationRequest:
    custom_data_identifier: str = dataclasses.field(metadata={'path_param': { 'field_name': 'customDataIdentifier', 'style': 'simple', 'explode': False }})
    r"""Unique identifier for a custom data type."""
    platform_key: str = dataclasses.field(metadata={'path_param': { 'field_name': 'platformKey', 'style': 'simple', 'explode': False }})
    r"""A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys."""
    



@dataclasses.dataclass
class GetCustomDataTypeConfigurationResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    custom_data_type_records: Optional[shared_customdatatyperecords.CustomDataTypeRecords] = dataclasses.field(default=None)
    r"""OK"""
    

