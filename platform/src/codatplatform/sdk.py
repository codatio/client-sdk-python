"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .companies import Companies
from .connection_management import ConnectionManagement
from .connections import Connections
from .custom_data_type import CustomDataType
from .groups import Groups
from .integrations import Integrations
from .push_data import PushData
from .refresh_data import RefreshData
from .sdkconfiguration import SDKConfiguration
from .settings import Settings
from .supplemental_data import SupplementalData
from .utils.retries import RetryConfig
from .webhooks import Webhooks
from codatplatform import utils
from codatplatform._hooks import SDKHooks
from codatplatform.models import shared
from typing import Callable, Dict, Optional, Union

class CodatPlatform:
    r"""Platform API: Platform API
    An API for the common components of all of Codat's products.

    These end points cover creating and managing your companies, data connections, and integrations.

    [Read about the building blocks of Codat...](https://docs.codat.io/core-concepts/companies) | [See our OpenAPI spec](https://github.com/codatio/oas) 

    ---
    <!-- Start Codat Tags Table -->
    ## Endpoints

    | Endpoints | Description |
    | :- |:- |
    | Companies | Create and manage your SMB users' companies. |
    | Connections | Create new and manage existing data connections for a company. |
    | Connection management | Configure connection management UI and retrieve access tokens for authentication. |
    | Groups | Define and manage sets of companies based on a chosen characteristic. |
    | Webhooks | Create and manage webhooks that listen to Codat's events. |
    | Integrations | Get a list of integrations supported by Codat and their logos. |
    | Refresh data | Initiate data refreshes, view pull status and history. |
    | Settings | Manage company profile configuration, sync settings, and API keys. |
    | Push data | Initiate and monitor Create, Update, and Delete operations. |
    | Supplemental data | Configure and pull additional data you can include in Codat's standard data types. |
    | Custom data type | Configure and pull additional data types that are not included in Codat's standardized data model. |
    <!-- End Codat Tags Table -->
    """
    settings: Settings
    r"""Manage company profile configuration, sync settings, and API keys."""
    companies: Companies
    r"""Create and manage your SMB users' companies."""
    connection_management: ConnectionManagement
    r"""Configure connection management UI and retrieve access tokens for authentication."""
    connections: Connections
    r"""Create new and manage existing data connections for a company."""
    custom_data_type: CustomDataType
    r"""Configure and pull additional data types that are not included in Codat's standardized data model."""
    push_data: PushData
    r"""Initiate and monitor Create, Update, and Delete operations."""
    refresh_data: RefreshData
    r"""Initiate data refreshes, view pull status and history."""
    groups: Groups
    r"""Define and manage sets of companies based on a chosen characteristic."""
    integrations: Integrations
    r"""Get a list of integrations supported by Codat and their logos."""
    supplemental_data: SupplementalData
    r"""Configure and pull additional data you can include in Codat's standard data types."""
    webhooks: Webhooks
    r"""Create and manage webhooks that listen to Codat's events."""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 security: Union[shared.Security,Callable[[], shared.Security]] = None,
                 server_idx: Optional[int] = None,
                 server_url: Optional[str] = None,
                 url_params: Optional[Dict[str, str]] = None,
                 client: Optional[requests_http.Session] = None,
                 retry_config: Optional[RetryConfig] = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :type security: Union[shared.Security,Callable[[], shared.Security]]
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: RetryConfig
        """
        if client is None:
            client = requests_http.Session()

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)
    

        self.sdk_configuration = SDKConfiguration(
            client,
            security,
            server_url,
            server_idx,
            retry_config=retry_config
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__['_hooks'] = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.settings = Settings(self.sdk_configuration)
        self.companies = Companies(self.sdk_configuration)
        self.connection_management = ConnectionManagement(self.sdk_configuration)
        self.connections = Connections(self.sdk_configuration)
        self.custom_data_type = CustomDataType(self.sdk_configuration)
        self.push_data = PushData(self.sdk_configuration)
        self.refresh_data = RefreshData(self.sdk_configuration)
        self.groups = Groups(self.sdk_configuration)
        self.integrations = Integrations(self.sdk_configuration)
        self.supplemental_data = SupplementalData(self.sdk_configuration)
        self.webhooks = Webhooks(self.sdk_configuration)
