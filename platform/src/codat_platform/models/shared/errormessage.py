"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .errorvalidation import ErrorValidation, ErrorValidationTypedDict
from codat_platform.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ErrorMessageTypedDict(TypedDict):
    r"""Too many requests were made in a given amount of time. Wait a short period and then try again."""

    can_be_retried: NotRequired[str]
    r"""`True` if the error occurred transiently and can be retried."""
    correlation_id: NotRequired[str]
    r"""Unique identifier used to propagate to all downstream services and determine the source of the error."""
    detailed_error_code: NotRequired[int]
    r"""Machine readable error code used to automate processes based on the code returned."""
    error: NotRequired[str]
    r"""A brief description of the error."""
    service: NotRequired[str]
    r"""Codat's service the returned the error."""
    status_code: NotRequired[int]
    r"""The HTTP status code returned by the error."""
    validation: NotRequired[Nullable[ErrorValidationTypedDict]]
    r"""A human-readable object describing validation decisions Codat has made. If an operation has failed because of validation errors, they will be detailed here."""


class ErrorMessage(BaseModel):
    r"""Too many requests were made in a given amount of time. Wait a short period and then try again."""

    can_be_retried: Annotated[Optional[str], pydantic.Field(alias="canBeRetried")] = (
        None
    )
    r"""`True` if the error occurred transiently and can be retried."""

    correlation_id: Annotated[Optional[str], pydantic.Field(alias="correlationId")] = (
        None
    )
    r"""Unique identifier used to propagate to all downstream services and determine the source of the error."""

    detailed_error_code: Annotated[
        Optional[int], pydantic.Field(alias="detailedErrorCode")
    ] = None
    r"""Machine readable error code used to automate processes based on the code returned."""

    error: Optional[str] = None
    r"""A brief description of the error."""

    service: Optional[str] = None
    r"""Codat's service the returned the error."""

    status_code: Annotated[Optional[int], pydantic.Field(alias="statusCode")] = None
    r"""The HTTP status code returned by the error."""

    validation: OptionalNullable[ErrorValidation] = UNSET
    r"""A human-readable object describing validation decisions Codat has made. If an operation has failed because of validation errors, they will be detailed here."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "canBeRetried",
            "correlationId",
            "detailedErrorCode",
            "error",
            "service",
            "statusCode",
            "validation",
        ]
        nullable_fields = ["validation"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
