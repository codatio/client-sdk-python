"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_platform.types import BaseModel
from codat_platform.utils import FieldMetadata, PathParamMetadata
from enum import Enum
import pydantic
from typing_extensions import Annotated, TypedDict


class PathParamDataType(str, Enum):
    r"""Data types that support supplemental data"""

    CHART_OF_ACCOUNTS = "chartOfAccounts"
    BILLS = "bills"
    COMPANY = "company"
    CREDIT_NOTES = "creditNotes"
    CUSTOMERS = "customers"
    INVOICES = "invoices"
    ITEMS = "items"
    JOURNAL_ENTRIES = "journalEntries"
    SUPPLIERS = "suppliers"
    TAX_RATES = "taxRates"
    COMMERCE_COMPANY_INFO = "commerce-companyInfo"
    COMMERCE_CUSTOMERS = "commerce-customers"
    COMMERCE_DISPUTES = "commerce-disputes"
    COMMERCE_LOCATIONS = "commerce-locations"
    COMMERCE_ORDERS = "commerce-orders"
    COMMERCE_PAYMENTS = "commerce-payments"
    COMMERCE_PAYMENT_METHODS = "commerce-paymentMethods"
    COMMERCE_PRODUCTS = "commerce-products"
    COMMERCE_PRODUCT_CATEGORIES = "commerce-productCategories"
    COMMERCE_TAX_COMPONENTS = "commerce-taxComponents"
    COMMERCE_TRANSACTIONS = "commerce-transactions"


class GetSupplementalDataConfigurationRequestTypedDict(TypedDict):
    data_type: PathParamDataType
    r"""Supported supplemental data data type."""
    platform_key: str
    r"""A unique 4-letter key to represent a platform in each integration."""


class GetSupplementalDataConfigurationRequest(BaseModel):
    data_type: Annotated[
        PathParamDataType,
        pydantic.Field(alias="dataType"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Supported supplemental data data type."""

    platform_key: Annotated[
        str,
        pydantic.Field(alias="platformKey"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""A unique 4-letter key to represent a platform in each integration."""
