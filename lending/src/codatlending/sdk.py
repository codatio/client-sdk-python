"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .accounting_bank_data import AccountingBankData
from .accounts_payable import AccountsPayable
from .accounts_receivable import AccountsReceivable
from .cash_flow import CashFlow
from .companies import Companies
from .company_info import CompanyInfo
from .connections import Connections
from .data_integrity import DataIntegrity
from .excel_reports import ExcelReports
from .file_upload import FileUpload
from .financials import Financials
from .liabilities import Liabilities
from .manage_data import ManageData
from .sales import Sales
from .sdkconfiguration import SDKConfiguration
from .transactions import Transactions
from codatlending import utils
from codatlending.models import shared

class CodatLending:
    r"""Lending API: An API for uploading and downloading files from 'File Upload' Integrations.

    The Accounting file upload, Banking file upload, and Business documents file upload integrations provide simple file upload functionality.

    [Read more...](https://docs.codat.io/other/file-upload)

    [See our OpenAPI spec](https://github.com/codatio/oas)
    """
    accounting_bank_data: AccountingBankData
    r"""Access bank transactions from an accounting platform."""
    accounts_payable: AccountsPayable
    r"""Data from a linked accounting platform representing money the business owes money to its suppliers."""
    accounts_receivable: AccountsReceivable
    r"""Data from a linked accounting platform representing money owed to the business for sold goods or services."""
    cash_flow: CashFlow
    r"""Retrieve banking data from linked bank accounts."""
    companies: Companies
    r"""Create and manage your Codat companies."""
    company_info: CompanyInfo
    r"""View company information fetched from the source platform."""
    connections: Connections
    r"""Manage your companies' data connections."""
    data_integrity: DataIntegrity
    r"""Match mutable accounting data with immutable banking data to increase confidence in financial data."""
    excel_reports: ExcelReports
    r"""Downloadable reports"""
    file_upload: FileUpload
    r"""Endpoints to manage uploaded files."""
    financials: Financials
    r"""Financial data and reports from a linked accounting platform."""
    liabilities: Liabilities
    r"""Debt and other liabilities."""
    manage_data: ManageData
    r"""Control how data is retrieved from an integration."""
    sales: Sales
    r"""Retrieve standardized sales data from a linked commerce platform."""
    transactions: Transactions
    r"""Data from a linked accounting platform representing transactions."""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 security: shared.Security = None,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        if client is None:
            client = requests_http.Session()
        
        security_client = utils.configure_security_client(client, security)
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security_client, server_url, server_idx)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.accounting_bank_data = AccountingBankData(self.sdk_configuration)
        self.accounts_payable = AccountsPayable(self.sdk_configuration)
        self.accounts_receivable = AccountsReceivable(self.sdk_configuration)
        self.cash_flow = CashFlow(self.sdk_configuration)
        self.companies = Companies(self.sdk_configuration)
        self.company_info = CompanyInfo(self.sdk_configuration)
        self.connections = Connections(self.sdk_configuration)
        self.data_integrity = DataIntegrity(self.sdk_configuration)
        self.excel_reports = ExcelReports(self.sdk_configuration)
        self.file_upload = FileUpload(self.sdk_configuration)
        self.financials = Financials(self.sdk_configuration)
        self.liabilities = Liabilities(self.sdk_configuration)
        self.manage_data = ManageData(self.sdk_configuration)
        self.sales = Sales(self.sdk_configuration)
        self.transactions = Transactions(self.sdk_configuration)
    