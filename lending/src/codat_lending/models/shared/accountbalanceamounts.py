"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_lending.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from codat_lending.utils import serialize_decimal, validate_decimal
from decimal import Decimal
from pydantic import model_serializer
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class AccountBalanceAmountsTypedDict(TypedDict):
    r"""Depending on the data provided by the underlying bank, not all balances are always available."""
    
    available: NotRequired[Nullable[Decimal]]
    r"""The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts."""
    current: NotRequired[Decimal]
    r"""The balance of the account only including cleared transactions."""
    limit: NotRequired[Nullable[Decimal]]
    r"""The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`."""
    

class AccountBalanceAmounts(BaseModel):
    r"""Depending on the data provided by the underlying bank, not all balances are always available."""
    
    available: Annotated[OptionalNullable[Decimal], BeforeValidator(validate_decimal), PlainSerializer(serialize_decimal(False))] = UNSET
    r"""The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts."""
    current: Annotated[Optional[Decimal], BeforeValidator(validate_decimal), PlainSerializer(serialize_decimal(False))] = None
    r"""The balance of the account only including cleared transactions."""
    limit: Annotated[OptionalNullable[Decimal], BeforeValidator(validate_decimal), PlainSerializer(serialize_decimal(False))] = UNSET
    r"""The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["available", "current", "limit"]
        nullable_fields = ["available", "limit"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
