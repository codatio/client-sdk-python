"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .excelreporttypes import ExcelReportTypes
from codat_lending.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ExcelStatusTypedDict(TypedDict):
    error_message: NotRequired[str]
    r"""Error details in case the report generation request was unsuccessful."""
    file_size: NotRequired[Nullable[int]]
    r"""The file size in Bytes is populated upon successful generation of the report."""
    in_progress: NotRequired[bool]
    r"""When true, the request was successful and the report is being generated. If false, the request was unsuccessful and the report is not being generated."""
    last_generated: NotRequired[str]
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """
    last_invocation_id: NotRequired[str]
    r"""A unique ID generated for this request."""
    queued: NotRequired[str]
    r"""The date and time of when a successful request was queued for the most recent report."""
    report_type: NotRequired[ExcelReportTypes]
    r"""The type of the report requested in the query string."""
    success: NotRequired[bool]
    r"""True if the requested report was successfully queued and false if the requested report was not able to be queued."""
    

class ExcelStatus(BaseModel):
    error_message: Annotated[Optional[str], pydantic.Field(alias="errorMessage")] = None
    r"""Error details in case the report generation request was unsuccessful."""
    file_size: Annotated[OptionalNullable[int], pydantic.Field(alias="fileSize")] = UNSET
    r"""The file size in Bytes is populated upon successful generation of the report."""
    in_progress: Annotated[Optional[bool], pydantic.Field(alias="inProgress")] = None
    r"""When true, the request was successful and the report is being generated. If false, the request was unsuccessful and the report is not being generated."""
    last_generated: Annotated[Optional[str], pydantic.Field(alias="lastGenerated")] = None
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """
    last_invocation_id: Annotated[Optional[str], pydantic.Field(alias="lastInvocationId")] = None
    r"""A unique ID generated for this request."""
    queued: Optional[str] = None
    r"""The date and time of when a successful request was queued for the most recent report."""
    report_type: Annotated[Optional[ExcelReportTypes], pydantic.Field(alias="reportType")] = None
    r"""The type of the report requested in the query string."""
    success: Optional[bool] = None
    r"""True if the requested report was successfully queued and false if the requested report was not able to be queued."""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["errorMessage", "fileSize", "inProgress", "lastGenerated", "lastInvocationId", "queued", "reportType", "success"]
        nullable_fields = ["fileSize"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        
