"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .accountbalanceamounts import AccountBalanceAmounts, AccountBalanceAmountsTypedDict
from .accountidentifiers import AccountIdentifiers, AccountIdentifiersTypedDict
from .accountingbankaccounttype import AccountingBankAccountType
from .accountinstitution import AccountInstitution, AccountInstitutionTypedDict
from codat_lending.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class BankingAccountTypedDict(TypedDict):
    r"""This data type provides a list of all the SMB's bank accounts, with rich data like balances, account numbers, and institutions holding the accounts.

    Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
    """

    balance: AccountBalanceAmountsTypedDict
    r"""Depending on the data provided by the underlying bank, not all balances are always available."""
    currency: str
    r"""The currency code for the account."""
    id: str
    r"""The ID of the account from the provider."""
    identifiers: AccountIdentifiersTypedDict
    r"""An object containing bank account identification information."""
    institution: AccountInstitutionTypedDict
    r"""The bank or other financial institution providing the account."""
    name: str
    r"""The name of the account according to the provider."""
    type: AccountingBankAccountType
    r"""The type of transactions and balances on the account.
    For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.
    For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
    """
    holder: NotRequired[Nullable[str]]
    r"""The name of the person or company who holds the account."""
    informal_name: NotRequired[Nullable[str]]
    r"""The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available."""
    modified_date: NotRequired[str]
    source_modified_date: NotRequired[str]


class BankingAccount(BaseModel):
    r"""This data type provides a list of all the SMB's bank accounts, with rich data like balances, account numbers, and institutions holding the accounts.

    Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
    """

    balance: AccountBalanceAmounts
    r"""Depending on the data provided by the underlying bank, not all balances are always available."""

    currency: str
    r"""The currency code for the account."""

    id: str
    r"""The ID of the account from the provider."""

    identifiers: AccountIdentifiers
    r"""An object containing bank account identification information."""

    institution: AccountInstitution
    r"""The bank or other financial institution providing the account."""

    name: str
    r"""The name of the account according to the provider."""

    type: AccountingBankAccountType
    r"""The type of transactions and balances on the account.
    For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.
    For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
    """

    holder: OptionalNullable[str] = UNSET
    r"""The name of the person or company who holds the account."""

    informal_name: Annotated[
        OptionalNullable[str], pydantic.Field(alias="informalName")
    ] = UNSET
    r"""The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available."""

    modified_date: Annotated[Optional[str], pydantic.Field(alias="modifiedDate")] = None

    source_modified_date: Annotated[
        Optional[str], pydantic.Field(alias="sourceModifiedDate")
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "holder",
            "informalName",
            "modifiedDate",
            "sourceModifiedDate",
        ]
        nullable_fields = ["holder", "informalName"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
