"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .accountidentifiertype import AccountIdentifierType
from codat_lending.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class AccountIdentifiersTypedDict(TypedDict):
    r"""An object containing bank account identification information."""

    type: AccountIdentifierType
    r"""Type of account"""
    bank_code: NotRequired[Nullable[str]]
    r"""The local (usually national) routing number for the account.

    This is known by different names in different countries:
    * BSB code (Australia)
    * routing number (Canada, USA)
    * sort code (UK)
    """
    bic: NotRequired[Nullable[str]]
    r"""The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account."""
    iban: NotRequired[Nullable[str]]
    r"""The international bank account number (IBAN) for the account, if known."""
    masked_account_number: NotRequired[Nullable[str]]
    r"""A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)"""
    number: NotRequired[Nullable[str]]
    r"""The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction."""
    subtype: NotRequired[Nullable[str]]
    r"""Detailed account category"""


class AccountIdentifiers(BaseModel):
    r"""An object containing bank account identification information."""

    type: AccountIdentifierType
    r"""Type of account"""

    bank_code: Annotated[OptionalNullable[str], pydantic.Field(alias="bankCode")] = (
        UNSET
    )
    r"""The local (usually national) routing number for the account.

    This is known by different names in different countries:
    * BSB code (Australia)
    * routing number (Canada, USA)
    * sort code (UK)
    """

    bic: OptionalNullable[str] = UNSET
    r"""The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account."""

    iban: OptionalNullable[str] = UNSET
    r"""The international bank account number (IBAN) for the account, if known."""

    masked_account_number: Annotated[
        OptionalNullable[str], pydantic.Field(alias="maskedAccountNumber")
    ] = UNSET
    r"""A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)"""

    number: OptionalNullable[str] = UNSET
    r"""The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction."""

    subtype: OptionalNullable[str] = UNSET
    r"""Detailed account category"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "bankCode",
            "bic",
            "iban",
            "maskedAccountNumber",
            "number",
            "subtype",
        ]
        nullable_fields = [
            "bankCode",
            "bic",
            "iban",
            "maskedAccountNumber",
            "number",
            "subtype",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
