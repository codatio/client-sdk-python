"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_lending.types import BaseModel
from codat_lending.utils import serialize_decimal, validate_decimal
from decimal import Decimal
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Any, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AccountBalanceTypedDict(TypedDict):
    available: NotRequired[Decimal]
    r"""The account's current balance"""
    currency: NotRequired[str]
    r"""The currency of the account"""
    pending: NotRequired[Decimal]
    r"""Funds that are not yet available in the balance"""
    reserved: NotRequired[Any]
    r"""Funds reserved as holdings"""


class AccountBalance(BaseModel):
    available: Annotated[
        Optional[Decimal],
        BeforeValidator(validate_decimal),
        PlainSerializer(serialize_decimal(False)),
    ] = None
    r"""The account's current balance"""

    currency: Optional[str] = None
    r"""The currency of the account"""

    pending: Annotated[
        Optional[Decimal],
        BeforeValidator(validate_decimal),
        PlainSerializer(serialize_decimal(False)),
    ] = None
    r"""Funds that are not yet available in the balance"""

    reserved: Optional[Any] = None
    r"""Funds reserved as holdings"""
