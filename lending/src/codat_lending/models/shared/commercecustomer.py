"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .commerceaddress import CommerceAddress, CommerceAddressTypedDict
from codat_lending.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CommerceCustomerTypedDict(TypedDict):
    r"""When a customer places an order with the connected commerce store their details are added to the Customers dataset. You can use the data from the Customers endpoints to calculate key metrics, such as customer churn."""

    id: str
    r"""A unique, persistent identifier for this record"""
    addresses: NotRequired[List[CommerceAddressTypedDict]]
    r"""Addresses of the customer"""
    created_date: NotRequired[str]
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """
    customer_name: NotRequired[str]
    r"""Name of the customer"""
    default_currency: NotRequired[str]
    email_address: NotRequired[str]
    r"""Email address of the customer"""
    modified_date: NotRequired[str]
    note: NotRequired[str]
    r"""Any additional information about the customer"""
    phone: NotRequired[Nullable[str]]
    r"""A phone number."""
    source_modified_date: NotRequired[str]


class CommerceCustomer(BaseModel):
    r"""When a customer places an order with the connected commerce store their details are added to the Customers dataset. You can use the data from the Customers endpoints to calculate key metrics, such as customer churn."""

    id: str
    r"""A unique, persistent identifier for this record"""

    addresses: Optional[List[CommerceAddress]] = None
    r"""Addresses of the customer"""

    created_date: Annotated[Optional[str], pydantic.Field(alias="createdDate")] = None
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """

    customer_name: Annotated[Optional[str], pydantic.Field(alias="customerName")] = None
    r"""Name of the customer"""

    default_currency: Annotated[
        Optional[str], pydantic.Field(alias="defaultCurrency")
    ] = None

    email_address: Annotated[Optional[str], pydantic.Field(alias="emailAddress")] = None
    r"""Email address of the customer"""

    modified_date: Annotated[Optional[str], pydantic.Field(alias="modifiedDate")] = None

    note: Optional[str] = None
    r"""Any additional information about the customer"""

    phone: OptionalNullable[str] = UNSET
    r"""A phone number."""

    source_modified_date: Annotated[
        Optional[str], pydantic.Field(alias="sourceModifiedDate")
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "addresses",
            "createdDate",
            "customerName",
            "defaultCurrency",
            "emailAddress",
            "modifiedDate",
            "note",
            "phone",
            "sourceModifiedDate",
        ]
        nullable_fields = ["phone"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
