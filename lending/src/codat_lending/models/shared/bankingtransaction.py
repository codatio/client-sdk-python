"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .transactioncategoryref import (
    TransactionCategoryRef,
    TransactionCategoryRefTypedDict,
)
from .transactioncode import TransactionCode
from codat_lending.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from codat_lending.utils import serialize_decimal, validate_decimal
from decimal import Decimal
import pydantic
from pydantic import model_serializer
from pydantic.functional_serializers import PlainSerializer
from pydantic.functional_validators import BeforeValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class BankingTransactionTypedDict(TypedDict):
    r"""The Banking Transactions data type provides an immutable source of up-to-date information on income and expenditure.

    Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
    """

    account_id: str
    r"""The unique identifier of the bank account."""
    currency: str
    r"""The currency of the bank transaction."""
    id: str
    r"""The unique identifier of the bank transaction."""
    amount: NotRequired[Decimal]
    r"""The amount of the bank transaction."""
    authorized_date: NotRequired[str]
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """
    code: NotRequired[TransactionCode]
    r"""Code to identify the underlying transaction."""
    description: NotRequired[Nullable[str]]
    r"""The description of the bank transaction."""
    merchant_name: NotRequired[Nullable[str]]
    r"""The name of the merchant."""
    modified_date: NotRequired[str]
    posted_date: NotRequired[str]
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """
    source_modified_date: NotRequired[str]
    transaction_category_ref: NotRequired[TransactionCategoryRefTypedDict]
    r"""An object of bank transaction category reference data."""


class BankingTransaction(BaseModel):
    r"""The Banking Transactions data type provides an immutable source of up-to-date information on income and expenditure.

    Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
    """

    account_id: Annotated[str, pydantic.Field(alias="accountId")]
    r"""The unique identifier of the bank account."""

    currency: str
    r"""The currency of the bank transaction."""

    id: str
    r"""The unique identifier of the bank transaction."""

    amount: Annotated[
        Optional[Decimal],
        BeforeValidator(validate_decimal),
        PlainSerializer(serialize_decimal(False)),
    ] = None
    r"""The amount of the bank transaction."""

    authorized_date: Annotated[
        Optional[str], pydantic.Field(alias="authorizedDate")
    ] = None
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """

    code: Optional[TransactionCode] = None
    r"""Code to identify the underlying transaction."""

    description: OptionalNullable[str] = UNSET
    r"""The description of the bank transaction."""

    merchant_name: Annotated[
        OptionalNullable[str], pydantic.Field(alias="merchantName")
    ] = UNSET
    r"""The name of the merchant."""

    modified_date: Annotated[Optional[str], pydantic.Field(alias="modifiedDate")] = None

    posted_date: Annotated[Optional[str], pydantic.Field(alias="postedDate")] = None
    r"""In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:

    ```
    2020-10-08T22:40:50Z
    2021-01-01T00:00:00
    ```



    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:

    - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
    - Unqualified local time: `2021-11-15T01:00:00`
    - UTC time offsets: `2021-11-15T01:00:00-05:00`

    > Time zones
    >
    > Not all dates from Codat will contain information about time zones.
    > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    """

    source_modified_date: Annotated[
        Optional[str], pydantic.Field(alias="sourceModifiedDate")
    ] = None

    transaction_category_ref: Annotated[
        Optional[TransactionCategoryRef], pydantic.Field(alias="transactionCategoryRef")
    ] = None
    r"""An object of bank transaction category reference data."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "amount",
            "authorizedDate",
            "code",
            "description",
            "merchantName",
            "modifiedDate",
            "postedDate",
            "sourceModifiedDate",
            "transactionCategoryRef",
        ]
        nullable_fields = ["description", "merchantName"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
