"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .commerceaddress import CommerceAddress, CommerceAddressTypedDict
from codat_lending.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CommerceLocationTypedDict(TypedDict):
    r"""The Location datatype holds information on the geographic location at which stocks of products may be held, as referenced in the Products data type.

    A Location also holds information on geographic locations where orders were placed, as referenced in the Orders data type.
    """

    id: str
    r"""A unique, persistent identifier for this record"""
    address: NotRequired[CommerceAddressTypedDict]
    modified_date: NotRequired[str]
    name: NotRequired[str]
    r"""Name of this location"""
    source_modified_date: NotRequired[str]


class CommerceLocation(BaseModel):
    r"""The Location datatype holds information on the geographic location at which stocks of products may be held, as referenced in the Products data type.

    A Location also holds information on geographic locations where orders were placed, as referenced in the Orders data type.
    """

    id: str
    r"""A unique, persistent identifier for this record"""

    address: Optional[CommerceAddress] = None

    modified_date: Annotated[Optional[str], pydantic.Field(alias="modifiedDate")] = None

    name: Optional[str] = None
    r"""Name of this location"""

    source_modified_date: Annotated[
        Optional[str], pydantic.Field(alias="sourceModifiedDate")
    ] = None
