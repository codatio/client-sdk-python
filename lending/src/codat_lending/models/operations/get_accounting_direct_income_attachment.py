"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_lending.types import BaseModel
from codat_lending.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetAccountingDirectIncomeAttachmentRequestTypedDict(TypedDict):
    attachment_id: str
    r"""Unique identifier for an attachment."""
    company_id: str
    r"""Unique identifier for a company."""
    connection_id: str
    r"""Unique identifier for a connection."""
    direct_income_id: str
    r"""Unique identifier for a direct income."""
    timeout_in_minutes: NotRequired[int]
    r"""Time limit for the push operation to complete before it is timed out."""
    

class GetAccountingDirectIncomeAttachmentRequest(BaseModel):
    attachment_id: Annotated[str, pydantic.Field(alias="attachmentId"), FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""Unique identifier for an attachment."""
    company_id: Annotated[str, pydantic.Field(alias="companyId"), FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""Unique identifier for a company."""
    connection_id: Annotated[str, pydantic.Field(alias="connectionId"), FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""Unique identifier for a connection."""
    direct_income_id: Annotated[str, pydantic.Field(alias="directIncomeId"), FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""Unique identifier for a direct income."""
    timeout_in_minutes: Annotated[Optional[int], pydantic.Field(alias="timeoutInMinutes"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    r"""Time limit for the push operation to complete before it is timed out."""
    
