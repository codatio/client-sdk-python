"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from codat_lending.types import BaseModel
from codat_lending.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import TypedDict
from typing_extensions import Annotated


class GetAccountingCustomerAttachmentRequestTypedDict(TypedDict):
    attachment_id: str
    r"""Unique identifier for an attachment."""
    company_id: str
    r"""Unique identifier for a company."""
    connection_id: str
    r"""Unique identifier for a connection."""
    customer_id: str
    r"""Unique identifier for a customer."""
    

class GetAccountingCustomerAttachmentRequest(BaseModel):
    attachment_id: Annotated[str, pydantic.Field(alias="attachmentId"), FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""Unique identifier for an attachment."""
    company_id: Annotated[str, pydantic.Field(alias="companyId"), FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""Unique identifier for a company."""
    connection_id: Annotated[str, pydantic.Field(alias="connectionId"), FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""Unique identifier for a connection."""
    customer_id: Annotated[str, pydantic.Field(alias="customerId"), FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    r"""Unique identifier for a customer."""
    
