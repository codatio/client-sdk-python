"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from codat.models import operations
from typing import Optional

class SyncFlowPreferences:
    r"""Configure preferences for any given sync for commerce company using sync flow."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_config_text_sync_flow(self) -> operations.GetConfigTextSyncFlowResponse:
        r"""Retrieve preferences for text fields on Sync Flow
        To enable retrieval of preferences set for the text fields on Sync Flow.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sync/commerce/config/ui/text'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConfigTextSyncFlowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetConfigTextSyncFlow200ApplicationJSON])
                res.get_config_text_sync_flow_200_application_json_object = out

        return res

    def get_sync_flow_url(self, request: operations.GetSyncFlowURLRequest) -> operations.GetSyncFlowURLResponse:
        r"""Retrieve sync flow url
        Get a URL for Sync Flow including a one time passcode.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSyncFlowURLRequest, base_url, '/config/sync/commerce/{commerceKey}/{accountingKey}/start', request)
        
        query_params = utils.get_query_params(operations.GetSyncFlowURLRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSyncFlowURLResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSyncFlowURL200ApplicationJSON])
                res.get_sync_flow_url_200_application_json_object = out

        return res

    def get_visible_accounts(self, request: operations.GetVisibleAccountsRequest) -> operations.GetVisibleAccountsResponse:
        r"""List visible accounts
        Enable retrieval for accounts which are visible on sync flow.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVisibleAccountsRequest, base_url, '/clients/{clientId}/config/ui/accounts/platform/{platformKey}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVisibleAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetVisibleAccounts200ApplicationJSON])
                res.get_visible_accounts_200_application_json_object = out

        return res

    def patch_config_text_sync_flow(self, request: operations.PatchConfigTextSyncFlowRequestBody) -> operations.PatchConfigTextSyncFlowResponse:
        r"""Update preferences for text fields on sync flow
        To enable update of preferences set for the text fields on sync flow.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sync/commerce/config/ui/text'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchConfigTextSyncFlowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchConfigTextSyncFlow200ApplicationJSON])
                res.patch_config_text_sync_flow_200_application_json_object = out

        return res

    def patch_visible_accounts_sync_flow(self, request: operations.PatchVisibleAccountsSyncFlowRequest) -> operations.PatchVisibleAccountsSyncFlowResponse:
        r"""Update the visible accounts on Sync Flow
        To enable update of accounts visible preferences set on Sync Flow.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchVisibleAccountsSyncFlowRequest, base_url, '/sync/commerce/config/ui/accounts/platform/{commerceKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchVisibleAccountsSyncFlowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PatchVisibleAccountsSyncFlow200ApplicationJSON])
                res.patch_visible_accounts_sync_flow_200_application_json_object = out

        return res

    